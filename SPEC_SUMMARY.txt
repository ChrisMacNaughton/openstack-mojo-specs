./object_storage_specs/swift_proxy/ha_parallel_scaleout/
This spec deploys a swift cluster fronted by multiple swift proxy front ends.
Swift proxy and swift storage are then simultaniously scaled out and the
resulting object store retested. WARNING: Scaling swift-proxy and
swift-storage is simultaiously is currently not supported so this spec is
known to fail

./object_storage_specs/swift_proxy/ha_serial_scaleout/
This spec deploys a swift cluster fronted by multiple swift proxy front ends.
Swift proxy is then scaled out and once that has completed swift storage is
scaled out. The resulting object store is then retested.

./object_storage_specs/swift_proxy/simple_nonha/
This spec deploys a swift cluster fronted by a single swift proxy. The
resulting object store is then tested.

./object_storage_specs/ceph_radosgw/simple_nonha/
This spec deploys a ceph cluster fronted by a single ceph rados gateway node.
The cluster is then tested with mulitple object store gets and retrivals.
Glance integeration is also tested.

./object_storage_specs/ceph_radosgw/ha/
This spec deploys a ceph cluster fronted by multiple ceph rados gateway nodes.
The rados gw leader is removed and additional units added. With tests run
after each change

./full_stack/next_deploy/
This spec performs a non-ha deploy using the next charms and then runs tests
to validate the deployment

./full_stack/ha_phased/
This spec performs a phased ha deploy then runs tests to validate the
deployment

./full_stack/ha_phased_chaos_pony/
This spec performs a phased ha deploy then runs tests to validate the
deployment. iThen chaos pony is used to add and remove units.

./full_stack/next_deploy_ssl/
This spec performs a non-ha deploy using the next charms wil ssl enabled
and then runs tests to validate the deployment

./full_stack/charmhelper_upgrade/
This spec collects the charms and then upgrades charmhelpers in each charm
before running a non-ha deployment and testing the resulting cloud

./full_stack/stable_to_next/
This spec performs a non-ha deploy using the stable charms, then upgrades the
charms to the devel versions and then runs tests to validate the deployment

./full_stack/charmhelper_upgrade_ha/
This spec collects the charms and then upgrades charmhelpers in each charm
before running a ha deployment and testing the resulting cloud

